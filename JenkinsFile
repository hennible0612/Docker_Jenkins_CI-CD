pipeline {
    agent any

    environment {
        // 환경 변수로 태그 설정
        DOCKER_TAG = "latest"
        REPO_NAME = "sungwoo166/jenkins"
        REMOTE_USER = "ubuntu"
        REMOTE_HOST = "13.125.5.85"
        CONTAINER_NAME = "springboot-web-service"
        IMAGE_NAME = "${REPO_NAME}:${DOCKER_TAG}"
    }


    stages {
        stage('Check Docker') {
            steps {
                script {
                    try {
                        sh 'docker --version'
                    } catch(Exception e) {
                        echo 'ERROR: Docker is not installed or not found in PATH'
                        echo "Caught: ${e}"
                    }
                }
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "https://github.com/hennible0612/Docker_Jenkins_CI-CD"
            }
        }

        stage('Prepare Environment') {
            steps {
                sh 'chmod +x ./gradlew'
            }
        }

        stage('Build Project') {
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PWD', usernameVariable: 'DOCKER_USR')]) {
                    sh 'echo $DOCKER_PWD | docker login -u $DOCKER_USR --password-stdin'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${REPO_NAME}:${DOCKER_TAG} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${REPO_NAME}:${DOCKER_TAG}"
            }
        }

//         stage('Docker Run') {
//             steps {
//                 echo 'Pull Docker Image & Docker Image Run'
//                 sshagent (credentials: ['ssh']) {
//                     sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo docker pull ${IMAGE_NAME}'"
//
//                     sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo docker ps -q --filter name=${CONTAINER_NAME} | grep -q . && sudo docker rm -f \$(sudo docker ps -aq --filter name=${CONTAINER_NAME})'"
//                     sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo docker run -d --name ${CONTAINER_NAME} -p 8080:8080 ${IMAGE_NAME}'"
//                 }
//             }
//         }
        stage('Deploy with Docker Compose') {
            steps {
                echo 'Deploy services using Docker Compose'
                sshagent (credentials: ['ssh']) {
                    // 원격 서버에 Docker Compose 파일 복사
                    sh "scp -o StrictHostKeyChecking=no docker-compose.yml ${REMOTE_USER}@${REMOTE_HOST}:~/"
                    sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo ls -al'"
                    sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo pwd'"

                    // 원격 서버에서 Docker Compose를 사용하여 서비스 배포
                    sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo docker-compose pull'"
                    sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo docker-compose down'"
                    sh "ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} 'sudo docker-compose up -d'"
                }
            }
        }


    }
}
